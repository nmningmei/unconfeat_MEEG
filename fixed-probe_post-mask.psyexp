<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.2.3">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'n_square': '128', 'probeFrames': '1', 'participant': '1', 'image_size': '256', 'opacity': '0.75', 'probe_frame': '1', 'postmask_dur': '20', 'session': '1', 'block': '1', 'debug': 'False'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="" valType="str" updates="None" name="OSF Project ID"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="True" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="use prefs" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="black" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="fixed-probe_post-mask" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="scene_camera.json" valType="file" updates="None" name="plCompanionCameraCalibration"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="response_routine">
      <RoutineSettingsComponent name="response_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="response_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="reponse_trigger_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="trials.addData(&quot;discrim_resptime&quot;, globalClock.getTime() - startTime)&amp;#10;&amp;#10;resp_options = [['nV_V',['Nonliving_Things','Living_Things']],&amp;#10;                ['V_nV',['Living_Things','Nonliving_Things']]]&amp;#10;&amp;#10;idx = np.random.choice([0,1])&amp;#10;msg = '{}'.format(resp_options[idx][0])&amp;#10;&amp;#10;trials.addData(&quot;response_window&quot;, resp_options[idx][0])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="temp_correctAns = (np.where((np.array(resp_options[idx][1]) === category))[0][0] + 1);&amp;#10;trials.addData(&quot;correctAns&quot;, temp_correctAns);&amp;#10;if (((response.keys === temp_correctAns.toString()) || (response.keys === temp_correctAns))) {&amp;#10;    temp_corr = 1;&amp;#10;} else {&amp;#10;    temp_corr = 0;&amp;#10;}&amp;#10;trials.addData(&quot;response.corr&quot;, temp_corr);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="temp_correctAns = np.where(np.array(resp_options[idx][1]) == category)[0][0]+1&amp;#10;&amp;#10;trials.addData('correctAns',temp_correctAns)&amp;#10;&amp;#10;# objective accuracy&amp;#10;&amp;#10;if (response.keys == str(temp_correctAns)) or (response.keys == temp_correctAns):&amp;#10;   temp_corr = 1&amp;#10;else:&amp;#10;    temp_corr = 0&amp;#10;&amp;#10;trials.addData('response.corr' , temp_corr)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="reponse_trigger_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="response" plugin="None">
        <Param val="'1','2'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correctAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="tell_response" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="tell_response" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg&amp;#10;&amp;#10;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="introduction">
      <RoutineSettingsComponent name="introduction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="introduction" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="description_of_experiment" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="description_of_experiment" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="您的任务是识别接下来的图片里是人脸还是房子。&amp;#10;&amp;#10;请根据V（人脸）和nV（房子）的相对位置来按键。&amp;#10;&amp;#10;对应左边的按“1”，对应右边的按“2”。&amp;#10;&amp;#10;请实验员按“空格”开始实验，同时移开鼠标。" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="start_experiment" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="start_experiment" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="3.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="jitter_delay">
      <RoutineSettingsComponent name="jitter_delay" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="jitter_delay" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="pick_jitter_delay_duration" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="jitter_delay_dur = np.random.choice([0.5, 1, 1.5, 2], {&quot;size&quot;: 1})[0];&amp;#10;trials.addData(&quot;jitter1&quot;, jitter_delay_dur);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;&amp;#10;jitter_delay_dur=np.random.choice([0.5,1,1.5,2,],size = 1,)[0]#first is jit1_count 0&amp;#10;&amp;#10;trials.addData(&quot;jitter1&quot;, jitter_delay_dur)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="pick_jitter_delay_duration" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="delay_post_mask" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="delay_post_mask" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="[0, 0]" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$jitter_delay_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="visibility">
      <RoutineSettingsComponent name="visibility" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="visibility" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <KeyboardComponent name="visible" plugin="None">
        <Param val="'1','2','3'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="1" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="visible" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="tell_visible" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="tell_visible" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="?" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="trigger_visibility" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="trials.addData(&quot;visible_resptime&quot;, globalClock.getTime() - startTime)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="trigger_visibility" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="staircase" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="count += 1;&amp;#10;trials.addData(&quot;mask_frames&quot;, postmask_dur);&amp;#10;count += 1;&amp;#10;if (((visible.keys === &quot;1&quot;.toString()) || (visible.keys === &quot;1&quot;))) {&amp;#10;    postmask_dur -= np.random.choice([1, 2, 3], {&quot;size&quot;: 1})[0];&amp;#10;    if ((postmask_dur &lt; 0)) {&amp;#10;        postmask_dur = 0;&amp;#10;    }&amp;#10;} else {&amp;#10;    if (((visible.keys === &quot;2&quot;.toString()) || (visible.keys === &quot;2&quot;))) {&amp;#10;        postmask_dur += np.random.choice([1, 2], {&quot;size&quot;: 1})[0];&amp;#10;        if ((postmask_dur &lt; 0)) {&amp;#10;            postmask_dur = 0;&amp;#10;        }&amp;#10;    } else {&amp;#10;        if (((visible.keys === &quot;3&quot;.toString()) || (visible.keys === &quot;3&quot;))) {&amp;#10;            postmask_dur += np.random.choice([1, 2, 3], {&quot;size&quot;: 1})[0];&amp;#10;            if ((postmask_dur &lt; 0)) {&amp;#10;                postmask_dur = 0;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="count += 1&amp;#10;trials.addData('mask_frames',postmask_dur)&amp;#10;    &amp;#10;count += 1&amp;#10;if (visible.keys == str('1')) or (visible.keys == '1'):# invisible&amp;#10;        postmask_dur -= np.random.choice([1,2,3],size=1,)[0]&amp;#10;        if postmask_dur &lt; 0:  postmask_dur = 0&amp;#10;elif (visible.keys == str('2')) or (visible.keys == '2'):# partially aware&amp;#10;        postmask_dur += np.random.choice([1,2],size=1,)[0]&amp;#10;        if postmask_dur &lt; 0:  postmask_dur = 0 &amp;#10;elif (visible.keys == str('3')) or (visible.keys == '3'): # visible&amp;#10;        postmask_dur += np.random.choice([1,2,3],size=1,)[0]&amp;#10;        if postmask_dur &lt; 0: postmask_dur = 0&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="staircase" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="show_message">
      <RoutineSettingsComponent name="show_message" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="show_message" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="print_" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;meanacc = trials.data['response.corr'].mean()&amp;#10;meanvis = trials.data['visible.corr'].mean()&amp;#10;#msg=&quot;{} / {}\n\nmean correct {:.2f} \npresenting frames = {}\nmean unconscious response = {:.3f}&quot; .format(&amp;#10;#count,n_total,meanacc,curr,meanvis)&amp;#10;&amp;#10;#msg = msg + '\nkey={},cor={}'.format(response.keys,str(temp_correctAns))&amp;#10;#msg WOULD BE TO DISPLAY IN A TXT OBJECT - THAT HAS BEEN DELETED" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="print(&quot;{}/{},mean unconscious = {:.2f}, frame = {}, p(correct) = {:.2f}&quot;.format(&amp;#10;    trials.thisN,trials.nTotal,&amp;#10;    meanvis,postmask_dur,meanacc))" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="print_" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="probe_routine">
      <RoutineSettingsComponent name="probe_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="probe_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="probe_trigger" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="trials.addData(&quot;image_onset_time&quot;, (globalClock.getTime() - startTime));&amp;#10;trigger_code = dict_answer[category];&amp;#10;stimulus_pulse_started = false;&amp;#10;stimulus_pulse_ended = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="trials.addData(&quot;image_onset_time&quot;, globalClock.getTime() - startTime)&amp;#10;trigger_code = dict_answer[category]&amp;#10;&amp;#10;stimulus_pulse_started = False&amp;#10;stimulus_pulse_ended = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if not debug:&amp;#10;    if probe.status == STARTED and not stimulus_pulse_started:&amp;#10;        # update params&amp;#10;        win.callOnFlip(dev.activate_line, trigger_code)&amp;#10;        stimulus_pulse_start_time = globalClock.getTime()&amp;#10;        stimulus_pulse_started = True&amp;#10;    if stimulus_pulse_started and not stimulus_pulse_ended: &amp;#10;        if globalClock.getTime() - stimulus_pulse_start_time &gt;= 0.005:&amp;#10;            #win.callOnFlip(port.write, str.encode('0'))&amp;#10;            stimulus_pulse_ended = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((! debug)) {&amp;#10;    if (((probe.status === PsychoJS.Status.STARTED) &amp;&amp; (! stimulus_pulse_started))) {&amp;#10;        psychoJS.window.callOnFlip(dev.activate_line, trigger_code);&amp;#10;        stimulus_pulse_start_time = globalClock.getTime();&amp;#10;        stimulus_pulse_started = true;&amp;#10;    }&amp;#10;    if ((stimulus_pulse_started &amp;&amp; (! stimulus_pulse_ended))) {&amp;#10;        if (((globalClock.getTime() - stimulus_pulse_start_time) &gt;= 0.005)) {&amp;#10;            stimulus_pulse_ended = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="probe_trigger" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="blank" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="blank" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$np.random.uniform(0.5,1,size = 1)[0]" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="probe" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$image_name" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="probe" valType="code" updates="None" name="name"/>
        <Param val="$probe_opacity" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$(image_size, image_size)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$blank.status == FINISHED" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_frame" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="End_experiment">
      <RoutineSettingsComponent name="End_experiment" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="End_experiment" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="The_End" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="The_End" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="print(globalClock.getTime() - startTime)&amp;#10;#print(&quot;mean unconscious = {:.2f}, frame = {}, p(correct) = {:.2f}&quot;.format(&amp;#10;#    meanvis,curr,meanacc))&amp;#10;&amp;#10;# port.close()" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="console.log((globalClock.getTime() - startTime));&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="setupTRIGetc">
      <RoutineSettingsComponent name="setupTRIGetc" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="setupTRIGetc" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="setup_vbles_trigger" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;curr=int(expInfo['probeFrames'])&amp;#10;count=0&amp;#10;&amp;#10;#n_total = 32&amp;#10;#premask_dur = float(expInfo['premask_dur'])&amp;#10;postmask_dur = float(expInfo['postmask_dur'])&amp;#10;session = int(expInfo['session'])&amp;#10;block = int(expInfo['block'])&amp;#10;n_square = int(expInfo['n_square'])&amp;#10;image_size = int(expInfo['image_size'])&amp;#10;probe_opacity = float(expInfo['opacity'])&amp;#10;probe_frame = int(expInfo['probe_frame'])&amp;#10;debug = bool(expInfo['debug'])&amp;#10;&amp;#10;if not debug:&amp;#10;    import pyxid2&amp;#10;    import time&amp;#10;&amp;#10;    # get a list of all attached XID devices&amp;#10;    devices = pyxid2.get_xid_devices()&amp;#10;&amp;#10;    dev = devices[0] # get the first device to use&amp;#10;    print(dev)&amp;#10;    dev.reset_base_timer()&amp;#10;    dev.reset_rt_timer()&amp;#10;    dev.set_pulse_duration(30)&amp;#10;&amp;#10;dict_answer = {'Living_Things':1,&amp;#10;               'Nonliving_Things':2,}&amp;#10;&amp;#10;dict_response = {'1':3,'2':4}&amp;#10;&amp;#10;dict_visible = {'1':5,'2':6,'3':7}&amp;#10;&amp;#10;import time&amp;#10;#from psychopy import parallel &amp;#10;#parallel.setPortAddress(888)&amp;#10;#wait_msg = &quot;Waiting for Scanner...&quot;&amp;#10;#msg = visual.TextStim(win, color = 'DarkGray', text = wait_msg)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as time from 'time';&amp;#10;curr = Number.parseInt(expInfo[&quot;probeFrames&quot;]);&amp;#10;count = 0;&amp;#10;postmask_dur = Number.parseFloat(expInfo[&quot;postmask_dur&quot;]);&amp;#10;session = Number.parseInt(expInfo[&quot;session&quot;]);&amp;#10;block = Number.parseInt(expInfo[&quot;block&quot;]);&amp;#10;n_square = Number.parseInt(expInfo[&quot;n_square&quot;]);&amp;#10;image_size = Number.parseInt(expInfo[&quot;image_size&quot;]);&amp;#10;probe_opacity = Number.parseFloat(expInfo[&quot;opacity&quot;]);&amp;#10;probe_frame = Number.parseInt(expInfo[&quot;probe_frame&quot;]);&amp;#10;debug = bool(expInfo[&quot;debug&quot;]);&amp;#10;if ((! debug)) {&amp;#10;    import * as pyxid2 from 'pyxid2';&amp;#10;    import * as time from 'time';&amp;#10;    devices = pyxid2.get_xid_devices();&amp;#10;    dev = devices[0];&amp;#10;    console.log(dev);&amp;#10;    dev.reset_base_timer();&amp;#10;    dev.reset_rt_timer();&amp;#10;    dev.set_pulse_duration(30);&amp;#10;}&amp;#10;dict_answer = {&quot;Living_Things&quot;: 1, &quot;Nonliving_Things&quot;: 2};&amp;#10;dict_response = {&quot;1&quot;: 3, &quot;2&quot;: 4};&amp;#10;dict_visible = {&quot;1&quot;: 5, &quot;2&quot;: 6, &quot;3&quot;: 7};&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.window.flip();&amp;#10;globalClock.reset();&amp;#10;startTime = globalClock.getTime();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#msg.draw()&amp;#10;win.flip()&amp;#10;&amp;#10;#while True:&amp;#10;#    if (parallel.readPin(10) == 1) or (event.getKeys() == ['q']):&amp;#10;#        break&amp;#10;#    else:&amp;#10;#        time.sleep(0.0001) # give 1ms to other processes&amp;#10;globalClock.reset()&amp;#10;startTime = globalClock.getTime() " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="setup_vbles_trigger" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="postmask">
      <RoutineSettingsComponent name="postmask" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="postmask" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <GratingComponent name="postmask_1" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="avg" valType="str" updates="constant" name="blendmode"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1.0" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="nearest" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="postmask_1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="$np.random.uniform(0,1,2).round(1)" valType="code" updates="set every repeat" name="phase"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="None" valType="code" updates="constant" name="sf"/>
        <Param val="$(image_size, image_size)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="$postmask_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$np.random.rand(n_square,n_square) * 2 -1" valType="str" updates="set every frame" name="tex"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </GratingComponent>
      <CodeComponent name="postmask_trigger" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="stimulus_pulse_started = false;&amp;#10;stimulus_pulse_ended = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="stimulus_pulse_started = False&amp;#10;stimulus_pulse_ended = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if not debug:&amp;#10;    if postmask_1.status == STARTED and not stimulus_pulse_started:&amp;#10;        # update params&amp;#10;        win.callOnFlip(dev.activate_line, 5)&amp;#10;        stimulus_pulse_start_time = globalClock.getTime()&amp;#10;        stimulus_pulse_started = True&amp;#10;    if stimulus_pulse_started and not stimulus_pulse_ended: &amp;#10;        if globalClock.getTime() - stimulus_pulse_start_time &gt;= 0.005:&amp;#10;            #win.callOnFlip(port.write, str.encode('0'))&amp;#10;            stimulus_pulse_ended = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((! debug)) {&amp;#10;    if (((postmask_1.status === PsychoJS.Status.STARTED) &amp;&amp; (! stimulus_pulse_started))) {&amp;#10;        psychoJS.window.callOnFlip(dev.activate_line, 5);&amp;#10;        stimulus_pulse_start_time = globalClock.getTime();&amp;#10;        stimulus_pulse_started = true;&amp;#10;    }&amp;#10;    if ((stimulus_pulse_started &amp;&amp; (! stimulus_pulse_ended))) {&amp;#10;        if (((globalClock.getTime() - stimulus_pulse_start_time) &gt;= 0.005)) {&amp;#10;            stimulus_pulse_ended = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="postmask_trigger" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="post_trial_jitter">
      <RoutineSettingsComponent name="post_trial_jitter" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="post_trial_jitter" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="post_fixation" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="post_fixation" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$jitter2_delay_dur" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="pick_post_fixation_duration" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="jitter2_delay_dur = np.random.choice([0.25, 0.5, 1], {&quot;size&quot;: 1})[0];&amp;#10;trials.addData(&quot;jitter2&quot;, jitter2_delay_dur);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;jitter2_delay_dur=np.random.choice([0.25,0.5,1,],size = 1)[0]#first is jit1_count 0&amp;#10;&amp;#10;trials.addData(&quot;jitter2&quot;, jitter2_delay_dur)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="pick_post_fixation_duration" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="global_fixation">
      <RoutineSettingsComponent name="global_fixation" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="global_fixation" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="first_fixation" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="first_fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="setupTRIGetc"/>
    <Routine name="introduction"/>
    <Routine name="global_fixation"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_18_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House5_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House38_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House42_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_24_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_92_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_21_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_10_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_40_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_23_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House48_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_45_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House96_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House61_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_57_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House80_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House99_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House85_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_28_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House76_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_39_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\3257831_House58_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House11_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House43_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House41_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House47_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House90_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House59_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House57_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House26_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_55_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House30_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House51_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House92_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House77_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House33_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_32_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House35_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House73_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\3257813_House74_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_53_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House56_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House95_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_63_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House100_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_8_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_78_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_63_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_4_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House97_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House84_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House82_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House24_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_8_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House98_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_85_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_44_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House31_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_74_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_96_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_52_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_17_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_43_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_66_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House39_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_92_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_14_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_90_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House29_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House72_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_83_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_32_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_65_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House21_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_77_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_17_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House6_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_56_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House66_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House86_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_36_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_91_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House50_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_25_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House83_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House20_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House14_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_53_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House37_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House88_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_27_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House16_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_29_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\3257879_House74_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House75_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House65_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House15_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_42_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_88_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_51_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_54_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_73_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House17_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House49_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_94_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_3_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_47_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_75_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House3_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House25_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House55_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_71_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House53_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_95_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_42_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_20_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House70_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_16_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_61_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_98_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_5_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House79_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_54_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_34_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_26_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_87_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_88_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_100_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House27_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_35_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House62_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House7_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House78_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_27_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_89_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_70_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_80_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_33_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House4_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_50_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_61_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_58_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House52_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_82_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_73_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_66_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House64_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_31_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_72_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House8_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House54_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House13_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_1_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_56_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House63_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_1_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House94_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House68_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House12_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House81_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House1_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House89_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_5_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House23_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House45_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House36_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House28_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House34_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_37_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_68_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_81_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House87_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_95_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_60_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House93_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_51_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_86_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_24_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House69_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_69_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House40_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_62_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_29_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House19_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House91_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_89_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House10_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House44_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\male_28_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House18_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House22_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_12_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House9_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_65_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\3257825_House58_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House2_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House71_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House67_0.png'), ('count', 0)]), OrderedDict([('category', 'Nonliving_Things'), ('image_name', 'processed\\house\\House32_0.png'), ('count', 0)]), OrderedDict([('category', 'Living_Things'), ('image_name', 'processed\\face\\female_58_0.png'), ('count', 0)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$f&quot;dataframes/face-house-{session}{block}.csv&quot;" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="12345" valType="code"/>
    </LoopInitiator>
    <Routine name="probe_routine"/>
    <Routine name="postmask"/>
    <Routine name="jitter_delay"/>
    <Routine name="response_routine"/>
    <Routine name="visibility"/>
    <Routine name="post_trial_jitter"/>
    <Routine name="show_message"/>
    <LoopTerminator name="trials"/>
    <Routine name="End_experiment"/>
  </Flow>
</PsychoPy2experiment>
