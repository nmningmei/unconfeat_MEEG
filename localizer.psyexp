<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.2.3">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': '1', 'image_size': '256', 'probe_frame': '1', 'debug': 'False'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="" valType="str" updates="None" name="OSF Project ID"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="True" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="use prefs" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="black" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="localizer" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="scene_camera.json" valType="file" updates="None" name="plCompanionCameraCalibration"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="setupTRIGetc">
      <RoutineSettingsComponent name="setupTRIGetc" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="setupTRIGetc" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="setup_vbles_trigger" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="image_size = int(expInfo['image_size'])&amp;#10;debug = bool(expInfo['debug'])&amp;#10;probe_frame = int(expInfo['probe_frame'])&amp;#10;import time&amp;#10;dict_answer = {'Living_Things':1,&amp;#10;               'Nonliving_Things':2,}&amp;#10;               &amp;#10;               &amp;#10;if not debug:&amp;#10;    import pyxid2&amp;#10;    import time&amp;#10;&amp;#10;    # get a list of all attached XID devices&amp;#10;    devices = pyxid2.get_xid_devices()&amp;#10;&amp;#10;    dev = devices[0] # get the first device to use&amp;#10;    print(dev)&amp;#10;    dev.reset_base_timer()&amp;#10;    dev.reset_rt_timer()&amp;#10;    dev.set_pulse_duration(10)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as time from 'time';&amp;#10;image_size = Number.parseInt(expInfo[&quot;image_size&quot;]);&amp;#10;debug = bool(expInfo[&quot;debug&quot;]);&amp;#10;probe_frame = Number.parseInt(expInfo[&quot;probe_frame&quot;]);&amp;#10;dict_answer = {&quot;Living_Things&quot;: 1, &quot;Nonliving_Things&quot;: 2};&amp;#10;if ((! debug)) {&amp;#10;    import * as pyxid2 from 'pyxid2';&amp;#10;    import * as time from 'time';&amp;#10;    devices = pyxid2.get_xid_devices();&amp;#10;    dev = devices[0];&amp;#10;    console.log(dev);&amp;#10;    dev.reset_base_timer();&amp;#10;    dev.reset_rt_timer();&amp;#10;    dev.set_pulse_duration(10);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.window.flip();&amp;#10;globalClock.reset();&amp;#10;startTime = globalClock.getTime();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="win.flip()&amp;#10;&amp;#10;globalClock.reset()&amp;#10;startTime = globalClock.getTime() " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="setup_vbles_trigger" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="introduction">
      <RoutineSettingsComponent name="introduction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="introduction" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="description_of_experiment" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="description_of_experiment" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="这个实验是一个定位任务。&amp;#10;&amp;#10;您的任务是识别接下来的图片里是人脸还是房子。&amp;#10;&amp;#10;请根据V（人脸）和nV（房子）的相对位置来按键。&amp;#10;&amp;#10;对应左边的按“1”，对应右边的按“2”。&amp;#10;&amp;#10;请实验员按“空格”键继续。" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="start_experiment" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="start_experiment" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="probe_routine">
      <RoutineSettingsComponent name="probe_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="probe_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="trials.addData(&quot;image_onset_time&quot;, (globalClock.getTime() - startTime));&amp;#10;stimulus_pulse_started = false;&amp;#10;stimulus_pulse_ended = false;&amp;#10;trigger_code = dict_answer[category];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="trials.addData(&quot;image_onset_time&quot;, globalClock.getTime() - startTime)&amp;#10;stimulus_pulse_started = False&amp;#10;stimulus_pulse_ended = False&amp;#10;trigger_code = dict_answer[category]" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if not debug:&amp;#10;    if probe.status == STARTED and not stimulus_pulse_started:&amp;#10;        # update params&amp;#10;        win.callOnFlip(dev.activate_line, trigger_code)&amp;#10;        stimulus_pulse_start_time = globalClock.getTime()&amp;#10;        stimulus_pulse_started = True&amp;#10;    if stimulus_pulse_started and not stimulus_pulse_ended: &amp;#10;        if globalClock.getTime() - stimulus_pulse_start_time &gt;= 0.005:&amp;#10;            #win.callOnFlip(port.write, str.encode('0'))&amp;#10;            stimulus_pulse_ended = True" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((! debug)) {&amp;#10;    if (((probe.status === PsychoJS.Status.STARTED) &amp;&amp; (! stimulus_pulse_started))) {&amp;#10;        psychoJS.window.callOnFlip(dev.activate_line, trigger_code);&amp;#10;        stimulus_pulse_start_time = globalClock.getTime();&amp;#10;        stimulus_pulse_started = true;&amp;#10;    }&amp;#10;    if ((stimulus_pulse_started &amp;&amp; (! stimulus_pulse_ended))) {&amp;#10;        if (((globalClock.getTime() - stimulus_pulse_start_time) &gt;= 0.005)) {&amp;#10;            stimulus_pulse_ended = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="preblank" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="preblank" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$np.random.uniform(0.5,1,size = 1)[0]" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="probe" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$image_name" valType="str" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="circle" valType="str" updates="constant" name="mask"/>
        <Param val="probe" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$(image_size, image_size)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$preblank.status == FINISHED" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="$probe_frame" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="code" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="postblank" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="postblank" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$probe.status == FINISHED" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$np.random.uniform(0.5,1,size = 1)[0]" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="response_routine">
      <RoutineSettingsComponent name="response_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="response_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="reponse_trigger_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="trials.addData(&quot;discrim_resptime&quot;, globalClock.getTime() - startTime)&amp;#10;&amp;#10;resp_options = [['nV_V',['Nonliving_Things','Living_Things']],&amp;#10;                ['V_nV',['Living_Things','Nonliving_Things']]]&amp;#10;&amp;#10;idx = np.random.choice([0,1])&amp;#10;msg = '{}'.format(resp_options[idx][0])&amp;#10;&amp;#10;trials.addData(&quot;response_window&quot;, resp_options[idx][0])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="temp_correctAns = np.where(np.array(resp_options[idx][1]) == category)[0][0]+1&amp;#10;&amp;#10;trials.addData('correctAns',temp_correctAns)&amp;#10;&amp;#10;# objective accuracy&amp;#10;&amp;#10;if (response.keys == str(temp_correctAns)) or (response.keys == temp_correctAns):&amp;#10;   temp_corr = 1&amp;#10;else:&amp;#10;    temp_corr = 0&amp;#10;&amp;#10;trials.addData('response.corr' , temp_corr)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="reponse_trigger_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="response" plugin="None">
        <Param val="'1','2'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correctAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="tell_response" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="tell_response" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$msg&amp;#10;&amp;#10;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="End_experiment">
      <RoutineSettingsComponent name="End_experiment" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="End_experiment" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="The_End" plugin="None">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="The_End" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="print(globalClock.getTime() - startTime)&amp;#10;#print(&quot;mean unconscious = {:.2f}, frame = {}, p(correct) = {:.2f}&quot;.format(&amp;#10;#    meanvis,curr,meanacc))" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="console.log((globalClock.getTime() - startTime));&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="setupTRIGetc"/>
    <Routine name="introduction"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('image_name', 'materials/house/House61.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face20.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face6.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face49.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House19.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House68.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House63.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House74.jpg'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House44.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House42.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face84.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House10.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face11.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face78.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House79.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face16.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face4.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face59.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House38.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face31.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House64.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face19.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face68.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face8.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face46.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face38.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face50.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face23.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face72.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face9.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House21.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face56.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face77.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face90.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face37.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face80.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House20.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face35.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face40.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face71.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House81.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face85.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face14.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House78.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face74.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House25.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House66.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House9.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House6.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face1.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face63.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face98.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face7.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House55.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face54.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House23.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House17.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face93.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House39.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House36.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House40.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House67.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House18.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House72.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face100.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House7.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House41.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House87.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face41.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face65.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House54.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House15.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House99.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face70.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House8.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House45.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face43.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House37.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face39.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face91.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House34.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House48.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face60.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House47.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face21.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face79.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face99.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House73.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face52.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face97.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House84.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face66.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House69.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face47.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face61.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face3.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face33.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House58.jpg'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House59.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House1.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House49.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House75.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face82.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face42.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House28.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House65.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House76.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House92.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face73.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face36.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face22.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House27.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face30.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House14.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House100.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House88.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face83.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House43.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House31.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House13.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House3.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face75.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House5.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House50.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House53.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House93.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House82.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House56.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face69.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House62.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face18.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face92.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face15.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House52.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House35.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House4.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House86.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House91.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face45.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House2.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House29.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House85.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face81.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House80.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House96.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House89.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face24.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House71.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House97.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face96.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face28.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face17.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House83.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House95.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face57.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House33.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face58.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face64.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face34.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face25.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face44.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face62.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House46.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face51.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face13.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face29.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face12.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face53.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House60.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House51.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House70.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face26.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House98.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House94.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face48.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House11.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House90.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House24.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face5.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House16.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face10.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House26.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/house/House22.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face2.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face55.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House32.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face88.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face94.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House57.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face86.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face87.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House77.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face95.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House12.png'), ('category', 'Nonliving_Things')]), OrderedDict([('image_name', 'materials/face/face27.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face67.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face32.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face76.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/face/face89.gif'), ('category', 'Living_Things')]), OrderedDict([('image_name', 'materials/house/House30.png'), ('category', 'Nonliving_Things')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="dataframes/localizer.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="12345" valType="code"/>
    </LoopInitiator>
    <Routine name="probe_routine"/>
    <Routine name="response_routine"/>
    <LoopTerminator name="trials"/>
    <Routine name="End_experiment"/>
  </Flow>
</PsychoPy2experiment>
